{
  "version": 3,
  "sources": ["../../../../../../node_modules/ng-flex-layout/fesm2022/ng-flex-layout-server.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Injectable, Inject, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { BEFORE_APP_SERIALIZED } from '@angular/platform-server';\nimport { ɵMatchMedia as _MatchMedia, BREAKPOINTS, LAYOUT_CONFIG, sortAscendingPriority, CLASS_NAME, StylesheetMap, MediaMarshaller, SERVER_TOKEN } from 'ng-flex-layout/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Special server-only class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass ServerMediaQueryList extends EventTarget {\n  get matches() {\n    return this._isActive;\n  }\n  get media() {\n    return this._mediaQuery;\n  }\n  constructor(_mediaQuery, _isActive = false) {\n    super();\n    this._mediaQuery = _mediaQuery;\n    this._isActive = _isActive;\n    this._listeners = [];\n    this.onchange = null;\n  }\n  /**\n  * Destroy the current list by deactivating the\n  * listeners and clearing the internal list\n  */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n  /** Notify all listeners that 'matches === TRUE' */\n  activate() {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach(callback => {\n        const cb = callback;\n        cb.call(this, {\n          matches: this.matches,\n          media: this.media\n        });\n      });\n    }\n    return this;\n  }\n  /** Notify all listeners that 'matches === false' */\n  deactivate() {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach(callback => {\n        const cb = callback;\n        cb.call(this, {\n          matches: this.matches,\n          media: this.media\n        });\n      });\n    }\n    return this;\n  }\n  /** Add a listener to our internal list to activate later */\n  addListener(listener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      const cb = listener;\n      cb.call(this, {\n        matches: this.matches,\n        media: this.media\n      });\n    }\n  }\n  /** Don't need to remove listeners in the server environment */\n  removeListener() {}\n  addEventListener() {}\n  removeEventListener() {}\n  dispatchEvent(_) {\n    return false;\n  }\n}\n/**\n * Special server-only implementation of MatchMedia that uses the above\n * ServerMediaQueryList as its internal representation\n *\n * Also contains methods to activate and deactivate breakpoints\n */\nclass ServerMatchMedia extends _MatchMedia {\n  constructor(_zone, _platformId, _document, breakpoints, layoutConfig) {\n    super(_zone, _platformId, _document);\n    this._zone = _zone;\n    this._platformId = _platformId;\n    this._document = _document;\n    this.breakpoints = breakpoints;\n    this.layoutConfig = layoutConfig;\n    this._activeBreakpoints = [];\n    const serverBps = layoutConfig.ssrObserveBreakpoints;\n    if (serverBps) {\n      this._activeBreakpoints = serverBps.reduce((acc, serverBp) => {\n        const foundBp = breakpoints.find(bp => serverBp === bp.alias);\n        if (!foundBp) {\n          console.warn(`FlexLayoutServerModule: unknown breakpoint alias \"${serverBp}\"`);\n        } else {\n          acc.push(foundBp);\n        }\n        return acc;\n      }, []);\n    }\n  }\n  /** Activate the specified breakpoint if we're on the server, no-op otherwise */\n  activateBreakpoint(bp) {\n    const lookupBreakpoint = this.registry.get(bp.mediaQuery);\n    if (lookupBreakpoint) {\n      lookupBreakpoint.activate();\n    }\n  }\n  /** Deactivate the specified breakpoint if we're on the server, no-op otherwise */\n  deactivateBreakpoint(bp) {\n    const lookupBreakpoint = this.registry.get(bp.mediaQuery);\n    if (lookupBreakpoint) {\n      lookupBreakpoint.deactivate();\n    }\n  }\n  /**\n  * Call window.matchMedia() to build a MediaQueryList; which\n  * supports 0..n listeners for activation/deactivation\n  */\n  buildMQL(query) {\n    const isActive = this._activeBreakpoints.some(ab => ab.mediaQuery === query);\n    return new ServerMediaQueryList(query, isActive);\n  }\n  static {\n    this.ɵfac = function ServerMatchMedia_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ServerMatchMedia)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(BREAKPOINTS), i0.ɵɵinject(LAYOUT_CONFIG));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ServerMatchMedia,\n      factory: ServerMatchMedia.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServerMatchMedia, [{\n    type: Injectable\n  }], () => [{\n    type: i0.NgZone\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [BREAKPOINTS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [LAYOUT_CONFIG]\n    }]\n  }], null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Activate all the registered breakpoints in sequence, and then\n * retrieve the associated stylings from the virtual stylesheet\n * @param serverSheet the virtual stylesheet that stores styles for each\n *        element\n * @param mediaController the MatchMedia service to activate/deactivate breakpoints\n * @param breakpoints the registered breakpoints to activate/deactivate\n * @param mediaMarshaller the MediaMarshaller service to disable fallback styles dynamically\n */\nfunction generateStaticFlexLayoutStyles(serverSheet, mediaController, breakpoints, mediaMarshaller) {\n  // Store the custom classes in the following map, that way only\n  // one class gets allocated per HTMLElement, and each class can\n  // be referenced in the static media queries\n  const classMap = new Map();\n  // Get the initial stylings for all the directives,\n  // and initialize the fallback block of stylings.\n  const defaultStyles = new Map(serverSheet.stylesheet);\n  // Reset the class counter, otherwise class numbers will\n  // increase with each server render.\n  nextId = 0;\n  let styleText = generateCss(defaultStyles, 'all', classMap);\n  mediaMarshaller.useFallbacks = false;\n  [...breakpoints].sort(sortAscendingPriority).forEach(bp => {\n    serverSheet.clearStyles();\n    mediaController.activateBreakpoint(bp);\n    const stylesheet = new Map(serverSheet.stylesheet);\n    if (stylesheet.size > 0) {\n      styleText += generateCss(stylesheet, bp.mediaQuery, classMap);\n    }\n    mediaController.deactivateBreakpoint(bp);\n  });\n  return styleText;\n}\n/**\n * Create a style tag populated with the dynamic stylings from Flex\n * components and attach it to the head of the DOM\n */\nfunction FLEX_SSR_SERIALIZER_FACTORY(serverSheet, mediaController, _document, breakpoints, mediaMarshaller) {\n  return () => {\n    // This is the style tag that gets inserted into the head of the DOM,\n    // populated with the manual media queries\n    const styleTag = _document.createElement('style');\n    const styleText = generateStaticFlexLayoutStyles(serverSheet, mediaController, breakpoints, mediaMarshaller);\n    styleTag.classList.add(`${CLASS_NAME}ssr`);\n    styleTag.textContent = styleText;\n    _document.head.appendChild(styleTag);\n  };\n}\n/**\n *  Provider to set static styles on the server\n */\nconst SERVER_PROVIDERS = [{\n  provide: BEFORE_APP_SERIALIZED,\n  useFactory: FLEX_SSR_SERIALIZER_FACTORY,\n  deps: [StylesheetMap, _MatchMedia, DOCUMENT, BREAKPOINTS, MediaMarshaller],\n  multi: true\n}, {\n  provide: SERVER_TOKEN,\n  useValue: true\n}, {\n  provide: _MatchMedia,\n  useClass: ServerMatchMedia\n}];\nlet nextId = 0;\nconst IS_DEBUG_MODE = false;\n/**\n * create @media queries based on a virtual stylesheet\n * * Adds a unique class to each element and stores it\n *   in a shared classMap for later reuse\n * @param stylesheet the virtual stylesheet that stores styles for each\n *        element\n * @param mediaQuery the given @media CSS selector for the current breakpoint\n * @param classMap the map of HTML elements to class names to avoid duplications\n */\nfunction generateCss(stylesheet, mediaQuery, classMap) {\n  let css = '';\n  stylesheet.forEach((styles, el) => {\n    let keyVals = '';\n    let className = getClassName(el, classMap);\n    styles.forEach((v, k) => {\n      keyVals += v ? format(`${k}:${v};`) : '';\n    });\n    if (keyVals) {\n      // Build list of CSS styles; each with a className\n      css += format(`.${className} {`, keyVals, '}');\n    }\n  });\n  // Group 1 or more styles (each with className) in a specific mediaQuery\n  return format(`@media ${mediaQuery} {`, css, '}');\n}\n/**\n * For debugging purposes, prefix css segment with linefeed(s) for easy\n  * debugging purposes.\n */\nfunction format(...list) {\n  let result = '';\n  list.forEach((css, i) => {\n    result += IS_DEBUG_MODE ? formatSegment(css, i !== 0) : css;\n  });\n  return result;\n}\nfunction formatSegment(css, asPrefix = true) {\n  return asPrefix ? `\\n${css}` : `${css}\\n`;\n}\n/**\n * Get className associated with CSS styling\n * If not found, generate global className and set\n * association.\n */\nfunction getClassName(element, classMap) {\n  let className = classMap.get(element);\n  if (!className) {\n    className = `${CLASS_NAME}${nextId++}`;\n    classMap.set(element, className);\n  }\n  element.classList.add(className);\n  return className;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass FlexLayoutServerModule {\n  static {\n    this.ɵfac = function FlexLayoutServerModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FlexLayoutServerModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: FlexLayoutServerModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [SERVER_PROVIDERS]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FlexLayoutServerModule, [{\n    type: NgModule,\n    args: [{\n      providers: [SERVER_PROVIDERS]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FLEX_SSR_SERIALIZER_FACTORY, FlexLayoutServerModule, SERVER_PROVIDERS, generateStaticFlexLayoutStyles };\n"],
  "mappings": "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",
  "names": []
}
